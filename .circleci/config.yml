# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
parameters:
  requirements_txt:
    description: Name of the requirements.txt file
    type: string
    default: requirements.txt
  python_version:
    description: Version of the CircleCI Python docker image to use
    type: string
    default: '3.7'

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
    
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  anchore: anchore/anchore-engine@1.6.0
  references:
    requirements_txt: &requirements_txt
      description: Name of the requirements.txt file
      type: string
      default: "requirements.txt"
    parameters:
      python_version: &python_version
        description: Version of the CircleCI Python docker image to use
        type: string
        default: "3.7"
    cache_key: &cache_key
      key: deps-{{ .Branch }}-{{ checksum "<<parameters.requirements_txt>>" }}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    working_directory: ~/blavity-test-bdd/tree/master/features
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: |  # use pipenv to install dependencies
            pip install behave
            run behave /blavity-test-bdd/tree/master/features/navBar.py
          #  sudo pip install pipenv
          #  sudo pip install pytest
           
          # pipenv install
          # sudo pip install pytest 
          # sudo pip install pipenv
        
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
     - build-and-test
